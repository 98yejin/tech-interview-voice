{
  "questions": [
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the basic concept of JavaScript and how it differs from Java.",
      "hint": "JavaScript is a scripting language primarily used for web development, while Java is a programming language used for various types of applications.",
      "id": 1,
      "question": "What is JavaScript and how is it different from Java?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "List and explain the different data types available in JavaScript.",
      "hint": "Primitive types: String, Number, Boolean, Null, Undefined, Symbol, and BigInt. Non-primitive type: Object.",
      "id": 2,
      "question": "What are the different data types in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Compare and contrast the '==' and '===' operators.",
      "hint": "'==' checks for value equality with type coercion, while '===' checks for value and type equality without coercion.",
      "id": 3,
      "question": "What is the difference between '==' and '===' in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the concept of closures in JavaScript with an example.",
      "hint": "A closure is a function that retains access to its outer function's variables even after the outer function has returned.",
      "id": 4,
      "question": "What is a closure in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Describe how the event loop works in JavaScript.",
      "hint": "The event loop allows JavaScript to perform non-blocking operations by handling asynchronous callbacks in a single-threaded environment.",
      "id": 5,
      "question": "What is the event loop in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Compare the scope, hoisting, and reassignability of 'var', 'let', and 'const'.",
      "hint": "'var' is function-scoped and hoisted; 'let' and 'const' are block-scoped with 'let' being reassignable and 'const' being immutable.",
      "id": 6,
      "question": "What is the difference between 'var', 'let', and 'const'?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the concept of promises and how they are used for handling asynchronous operations.",
      "hint": "Promises represent the eventual completion or failure of an asynchronous operation and its resulting value.",
      "id": 7,
      "question": "What are promises in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Describe the 'this' keyword and how its value is determined.",
      "hint": "'this' refers to the object it belongs to, and its value depends on the context in which a function is called.",
      "id": 8,
      "question": "What is the 'this' keyword in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain how prototypal inheritance works in JavaScript.",
      "hint": "Prototypal inheritance allows objects to inherit properties and methods from other objects via the prototype chain.",
      "id": 9,
      "question": "What is prototypal inheritance in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Discuss various techniques for error handling in JavaScript.",
      "hint": "Use try-catch blocks, the 'throw' statement, and custom error objects for handling exceptions.",
      "id": 10,
      "question": "How do you handle errors in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Compare and contrast synchronous and asynchronous programming in JavaScript.",
      "hint": "Synchronous code is executed sequentially, while asynchronous code allows tasks to run independently, often using callbacks, promises, or async/await.",
      "id": 11,
      "question": "What is the difference between synchronous and asynchronous code?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the purpose and syntax of an IIFE in JavaScript.",
      "hint": "An IIFE is a function that is defined and executed immediately, often used to create a local scope and avoid polluting the global namespace.",
      "id": 12,
      "question": "What is an IIFE (Immediately Invoked Function Expression)?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Describe the syntax and behavior of arrow functions in JavaScript.",
      "hint": "Arrow functions have a shorter syntax, do not have their own 'this' binding, and cannot be used as constructors.",
      "id": 13,
      "question": "What are arrow functions and how do they differ from regular functions?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain how 'bind', 'call', and 'apply' are used to manipulate the 'this' context in functions.",
      "hint": "'bind' returns a new function with a specified 'this' context, while 'call' and 'apply' invoke a function with a specified 'this' context.",
      "id": 14,
      "question": "What is the purpose of the 'bind', 'call', and 'apply' methods?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Describe the concept of event delegation and its benefits.",
      "hint": "Event delegation allows handling events at a higher level in the DOM hierarchy, taking advantage of event bubbling for improved performance.",
      "id": 15,
      "question": "What is event delegation in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the concept of modules and the different module systems in JavaScript.",
      "hint": "Modules encapsulate code into reusable units. Common module systems include CommonJS, AMD, and ES6 modules.",
      "id": 16,
      "question": "What are modules in JavaScript and how do you use them?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Describe the Fetch API and provide an example of how to make an HTTP request.",
      "hint": "The Fetch API provides a modern way to make HTTP requests, returning promises for handling asynchronous operations.",
      "id": 17,
      "question": "What is the Fetch API and how is it used?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain how 'async' and 'await' are used to write asynchronous code.",
      "hint": "'async' functions return promises, and 'await' pauses execution until the promise is resolved or rejected.",
      "id": 18,
      "question": "What is the purpose of the 'async' and 'await' keywords?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the structure and purpose of a promise, and provide an example of creating a promise.",
      "hint": "A promise represents the eventual result of an asynchronous operation. Use 'new Promise' with resolve and reject functions.",
      "id": 19,
      "question": "What is a JavaScript promise and how do you create one?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Discuss methods for catching and handling errors in asynchronous code.",
      "hint": "Use '.catch' with promises or try-catch blocks with async/await.",
      "id": 20,
      "question": "How do you handle asynchronous errors in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the concept of generator functions and their use cases.",
      "hint": "Generator functions use the 'function*' syntax and yield values, allowing for paused and resumed execution.",
      "id": 21,
      "question": "What is a JavaScript generator function?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Compare the 'null' and 'undefined' values and their use cases.",
      "hint": "'undefined' indicates a variable has been declared but not assigned a value; 'null' is an assignment value representing no value.",
      "id": 22,
      "question": "What is the difference between null and undefined in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Describe the structure and features of JavaScript objects.",
      "hint": "Objects are collections of key-value pairs, where keys are strings (or Symbols) and values can be any data type.",
      "id": 23,
      "question": "What is an object in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Discuss various methods for creating and working with arrays.",
      "hint": "Use array literals, the 'Array' constructor, and methods like 'push', 'pop', 'shift', 'unshift', 'splice', and 'slice'.",
      "id": 24,
      "question": "How do you create and manipulate arrays in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the purpose and syntax of the spread operator.",
      "hint": "The spread operator ('...') expands iterable elements like arrays or objects into individual elements.",
      "id": 25,
      "question": "What is the spread operator and how is it used?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Describe the syntax and advantages of template literals.",
      "hint": "Template literals use backticks and support embedded expressions, multi-line strings, and string interpolation.",
      "id": 26,
      "question": "How do you use template literals in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain how destructuring assignment works and provide examples.",
      "hint": "Destructuring assignment extracts values from arrays or properties from objects into distinct variables.",
      "id": 27,
      "question": "What is destructuring in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Compare and contrast function declarations and function expressions in JavaScript.",
      "hint": "Function declarations are hoisted, while function expressions are not.",
      "id": 28,
      "question": "What is the difference between function declarations and function expressions?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Describe the concept of higher-order functions and provide examples.",
      "hint": "Higher-order functions take other functions as arguments or return them as results.",
      "id": 29,
      "question": "What are higher-order functions in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain how the map, filter, and reduce methods work and provide examples.",
      "hint": "These methods iterate over arrays to transform, filter, or reduce elements to a single value.",
      "id": 30,
      "question": "How do you use the map, filter, and reduce methods on arrays?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Discuss the Document Object Model (DOM) and methods for manipulating it.",
      "hint": "Use methods like 'getElementById', 'querySelector', 'appendChild', 'removeChild', 'setAttribute', and 'classList'.",
      "id": 31,
      "question": "What is the DOM and how do you manipulate it with JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Compare the 'for...of' and 'for...in' loops and their use cases.",
      "hint": "'for...of' iterates over iterable objects; 'for...in' iterates over enumerable properties of an object.",
      "id": 32,
      "question": "What is the difference between 'for...of' and 'for...in' loops?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the concept of classes in JavaScript and provide an example of defining a class.",
      "hint": "Classes are syntactic sugar over prototypal inheritance, defined using the 'class' keyword.",
      "id": 33,
      "question": "What are JavaScript classes and how do you define them?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Describe the purpose of the 'new' keyword in creating instances of objects.",
      "hint": "'new' creates an instance of a constructor function, setting up prototype inheritance.",
      "id": 34,
      "question": "What is the 'new' keyword and how is it used?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain how the 'super' keyword is used in classes and inheritance.",
      "hint": "'super' calls the constructor or methods of the parent class.",
      "id": 35,
      "question": "What is the purpose of the 'super' keyword in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Discuss methods for parsing and stringifying JSON data.",
      "hint": "Use 'JSON.parse' to convert JSON strings to objects and 'JSON.stringify' to convert objects to JSON strings.",
      "id": 36,
      "question": "How do you handle JSON data in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the role of service workers in progressive web applications (PWAs).",
      "hint": "Service workers run in the background to handle caching, push notifications, and offline capabilities.",
      "id": 37,
      "question": "What are service workers and how are they used?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Compare the features and use cases of localStorage and sessionStorage.",
      "hint": "localStorage persists data across sessions, while sessionStorage only persists data for the current session.",
      "id": 38,
      "question": "What is the difference between localStorage and sessionStorage?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Describe the Geolocation API and provide an example of obtaining a user's location.",
      "hint": "Use 'navigator.geolocation.getCurrentPosition' to retrieve the user's current position.",
      "id": 39,
      "question": "How do you use the Geolocation API in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the concept of WebSockets and provide an example of establishing a WebSocket connection.",
      "hint": "WebSockets provide full-duplex communication channels over a single TCP connection. Use 'new WebSocket(url)' to create a connection.",
      "id": 40,
      "question": "What is WebSockets and how are they used?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Discuss Cross-Origin Resource Sharing (CORS) and methods for managing it.",
      "hint": "CORS is a security feature that restricts web pages from making requests to a different domain than the one that served the web page.",
      "id": 41,
      "question": "What is CORS and how do you handle it?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain various methods for creating objects, including object literals, constructors, and Object.create().",
      "hint": "Use object literals for simple objects, constructors for similar objects, and Object.create() for specifying the prototype.",
      "id": 42,
      "question": "What are the different ways to create objects in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Compare the 'apply' and 'call' methods for invoking functions with different 'this' contexts.",
      "hint": "'apply' takes arguments as an array, while 'call' takes arguments individually.",
      "id": 43,
      "question": "What is the difference between 'apply' and 'call' methods?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Discuss the concepts of debouncing and throttling, and provide examples of each.",
      "hint": "Debouncing limits the rate a function is executed; throttling ensures a function is called at most once in a specified period.",
      "id": 44,
      "question": "How do you debounce or throttle functions in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the purpose and use cases of WeakMap and WeakSet.",
      "hint": "WeakMap and WeakSet hold weak references to objects, allowing garbage collection if there are no other references.",
      "id": 45,
      "question": "What are JavaScript WeakMap and WeakSet?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Discuss the Temporal API and its benefits over the Date object.",
      "hint": "Temporal API provides better support for date and time manipulation, fixing many issues with the Date object.",
      "id": 46,
      "question": "What is the Temporal API and why is it introduced?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain various techniques for validating form inputs in JavaScript.",
      "hint": "Use HTML5 validation attributes, custom validation logic in JavaScript, and libraries like Yup or Validator.js.",
      "id": 47,
      "question": "How do you handle form validation in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Describe the concept of hoisting and how it affects variable and function declarations.",
      "hint": "Hoisting moves variable and function declarations to the top of their containing scope before code execution.",
      "id": 48,
      "question": "What is hoisting in JavaScript?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Discuss techniques for improving the performance of JavaScript code.",
      "hint": "Minimize DOM manipulation, use efficient algorithms, defer or async script loading, and leverage browser caching.",
      "id": 49,
      "question": "How do you optimize JavaScript performance?"
    },
    {
      "appropriate_time": "5 minutes",
      "description": "Explain the differences between deep copy and shallow copy, and when to use each.",
      "hint": "A shallow copy copies references to objects, while a deep copy duplicates all objects and their references.",
      "id": 50,
      "question": "What is the difference between deep copy and shallow copy?"
    }
  ],
  "title": "JavaScript "
}
